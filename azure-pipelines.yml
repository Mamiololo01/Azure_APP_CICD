# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  - group: app-one
  - name: region
    value: 'us-east-2'
  - name: erc_repo_name
    value: 'app-one'
  - name: profile
    value: 'AppOneProfile'
trigger:
  - main
  
pool:
    vmImage: ubuntu-latest
  
steps:
  - task: PowerShell@2
    displayName: 'Check and install AWS.Tools.Installer and AWS.Tools.Common modules'
    inputs:
      filePath: 'InstallAWSTools.ps1'

  # - task: PowerShell@2
  #   displayName: 'Build Number'
  #   inputs:
  #       targetType: 'inline'
  #       script: 'Write-Host "BuildNumber: $(Build.BuildNumber)"'

  - task: PowerShell@2
    displayName: 'Set AWS Credentail'
    inputs:
      targetType: 'inline'
      script: 'Set-AWSCredential -AccessKey $(App-One.AccessKey) `
                -SecretKey $(App-One.SecretKey) `
                -StoreAs $(profile)'

  - task: PowerShell@2
    displayName: 'Check if Amazon ECR repository exists'
    inputs:
      targetType: 'inline'
      script: |
        if ("$(erc_repo_name)" -ne ((Get-ECRRepository -ProfileName $(profile) -Region $(region)) `
         | where-object {$_.RepositoryName -eq "$(erc_repo_name)"}).RepositoryName)
        {
          Write-Host "Repository $(erc_repo_name) does not exist, and will be created."
          New-ECRRepository -ImageScanningConfiguration_ScanOnPush 1 -ImageTagMutability 'MUTABLE' `
          -ProfileName $(profile) -Region $(region) -RepositoryName $(erc_repo_name) -Select ^RepositoryName
        } else {
          Write-Host "Repository $(erc_repo_name) already exists."
        }

  - task: PowerShell@2
    displayName: 'Docker login'
    inputs:
      targetType: 'inline'
      script: '(Get-ECRLoginCommand -ProfileName $(profile) -Region $(region)).Password `
      | docker login --username AWS --password-stdin $(aws_account_number).dkr.ecr.$(region).amazonaws.com'
  
  - task: PowerShell@2
    displayName: 'Build docker image'
    inputs:
      targetType: 'inline'
      script: 'docker build -t $(erc_repo_name):$(Build.BuildNumber) .'

  - task: PowerShell@2
    displayName: 'Tag docker image'
    inputs:
      targetType: 'inline'
      script: 'docker tag $(erc_repo_name):$(Build.BuildNumber) `
      $(aws_account_number).dkr.ecr.$(region).amazonaws.com/$(erc_repo_name):$(Build.BuildNumber)'

  - task: PowerShell@2
    displayName: 'Push docker image to ECR'
    inputs:
      targetType: 'inline'
      script: 'docker push `
      $(aws_account_number).dkr.ecr.$(region).amazonaws.com/$(erc_repo_name):$(Build.BuildNumber)'

  #https://docs.docker.com/engine/reference/commandline/login/#credential-helpers
  - task: PowerShell@2
    displayName: 'Docker logout'
    inputs:
      targetType: 'inline'
      script: 'docker logout'
    condition: always()

  - task: PowerShell@2
    displayName: 'Remove AWS Credentail'
    inputs:
      targetType: 'inline'
      script: 'Remove-AWSCredentialProfile -ProfileName $(profile) -Force'
    condition: always()